apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'


def keystorePropertiesFile = file("C:\\Users\\USER\\AndroidStudioProjects\\.gradle\\gradle.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def keystorePropertiesFileSigning = rootProject.file("keystore.properties")
def keystorePropertiesSigning = new Properties()
keystorePropertiesSigning.load(new FileInputStream(keystorePropertiesFileSigning))

android {
    signingConfigs {
        config {
            keyAlias keystorePropertiesSigning['keyAlias']
            keyPassword keystorePropertiesSigning['keyPassword']
            storeFile file(keystorePropertiesSigning['storeFile'])
            storePassword keystorePropertiesSigning['storePassword']
        }
    }
    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        applicationId "com.qartf.popularmovies"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 6
        versionName "1.05"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            multiDexEnabled = true

            buildTypes.each {
                it.buildConfigField 'String', 'THE_MOVIE_DB_API_TOKEN', keystoreProperties['MyTheMovieDBApiToken']
            }
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.kotlin.stdlib
    implementation deps.support.app_compat
    implementation deps.support.core_ktx
    implementation deps.support.design
    implementation deps.support.fragment_runtime
    implementation deps.support.preference
    implementation deps.constraint_layout

    // Room
    implementation deps.room.runtime
    kapt deps.room.compiler

    // Lifecycle
    implementation deps.lifecycle.extensions

    //Paging
    implementation deps.paging_ktx

    // Coroutines
    implementation deps.coroutines.core
    implementation deps.coroutines.android

    // Retrofit for networking
    implementation deps.retrofit.runtime
    implementation deps.retrofit.moshi
    implementation deps.retrofit.coroutines_adapter

    // Moshi for parsing the JSON format
    implementation deps.moshi.runtime
    implementation deps.moshi.kotlin

    // Navigation
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx

    // Glide
    implementation deps.glide.runtime
    kapt deps.glide.compiler

    //Test
    testImplementation deps.atsl.runner
    testImplementation deps.espresso.core

    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules
    androidTestImplementation deps.arch_core.testing
    androidTestImplementation deps.retrofit.mock

    //Espresso UI Testing
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib
    androidTestImplementation deps.espresso.intents
}
